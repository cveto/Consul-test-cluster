---
  - name: Playbook
    #hosts: localhost              
    hosts: all                                           # Possible Vagrant BUG. This should be localhost, but Vagrant fails to execute. If playbook is run directly on the guest, the localhost works as expected.  Actually it's a feature by called "Implicit localhost"
    become: yes                                          # All implies localhost
    gather_facts: yes
    vars:
      - var_ip_node_1: "10.22.0.34"                      # Is the server, and the rest of playbook relies on that
      - var_ip_node_2: "10.22.0.35"
      - var_ip_node_3: "10.22.0.36"
      - var_ip_node_4: "10.22.0.37"
      - var_hostname_node1: "node-4-CentOS7"
      - var_hostname_node2: "node-5-CentOS7"
      - var_hostname_node3: "node-6-CentOS7"
      - var_hostname_node4: "node-7-CentOS7"

      - var_ip_consul_server: "{{ var_ip_node_1 }}"     # Who is to be the Consul server is decided here    
      - var_am_i_server: "{{ 'yes' if var_ip_consul_server == ansible_enp0s8.ipv4.address  else 'no' }}"        
      
      - var_consul_user: "consul"
      - var_ssh_user: "Michel_Lotito"

    tasks:
      ##  F I R E W A L L   C O N F I G U R A T I O N
      ##  **********************************************************************************************
      - name: Update Firewall
        yum:
          name: firewalld
          state: latest  
      
      - name: Firewall configuration. Ansible firewall module is not up to this task.
        command: "{{ item }}"
        ignore_errors: yes
        loop: 
          - systemctl start firewalld.service
          
            # Create new service "consul".
          - firewall-cmd --permanent --new-service=consul
          - firewall-cmd --permanent --service=consul --set-description="CONSUL.IO service discovery daemon"
          - firewall-cmd --permanent --service=consul --set-short="CONSUL.IO service discovery daemon"
          
            # Add ports to the newly created service, needed by consul non-server nodes.
          - firewall-cmd --permanent --service=consul --add-port=8600/tcp
          - firewall-cmd --permanent --service=consul --add-port=8600/udp
          - firewall-cmd --permanent --service=consul --add-port=8500/tcp
          - firewall-cmd --permanent --service=consul --add-port=8501/tcp
          - firewall-cmd --permanent --service=consul --add-port=8502/tcp
          - firewall-cmd --permanent --service=consul --add-port=8301/tcp
          - firewall-cmd --permanent --service=consul --add-port=8301/udp
          #- firewall-cmd --permanent --service=consul --add-port=21000-21225/tcp       # Not sure about this one
          
            # Binds the consul and some other services to the "dmz" zone.
          - firewall-cmd --reload                                                       # Needed otherwise it is not aware that the service "consul" exists already.
          - firewall-cmd --permanent --zone=dmz --add-service=consul
          - firewall-cmd --permanent --zone=dmz --add-service=https
          - firewall-cmd --permanent --zone=dmz --add-service=https
          - firewall-cmd --permanent --zone=dmz --add-service=ntp
          - firewall-cmd --permanent --zone=dmz --add-service=ssh
          - firewall-cmd --permanent --zone=dmz --add-icmp-block echo-reply
          - firewall-cmd --permanent --zone=dmz --add-icmp-block echo-request
          - firewall-cmd --permanent --zone=dmz --add-icmp-block-inversion 
            
            # Drop all packets unless explicitly permitted
          - firewall-cmd --permanent --zone=public --set-target=DROP
          - firewall-cmd --permanent --zone=dmz --set-target=DROP
          
            # Remove dhcpv6-client
          - firewall-cmd --permanent --zone=public --remove-service=dhcpv6-client
          - firewall-cmd --permanent --zone=dmz --remove-service=dhcpv6-client  

            # Bind network interface to a zone
          - firewall-cmd --permanent --zone=public --change-interface=enp0s3
          - firewall-cmd --permanent --zone=dmz --change-interface=enp0s8
          
            
            # Make Network Manager aware of the firewall rules
          #- nmcli c modify enp0s3 connection.zone "public"
          #- nmcli c modify enp0s8 connection.zone "dmz"
          
      ##  Firewall configuration specific for consul server nodes only.
      - name: Firewall configuration for consul server node.
        command: "{{ item }}"
        ignore_errors: yes
        loop:       
          - firewall-cmd --permanent --service=consul --add-port=8302/tcp
          - firewall-cmd --permanent --service=consul --add-port=8302/udp
          - firewall-cmd --permanent --service=consul --add-port=8300/tcp
        when: var_am_i_server == "yes"
        
      ##  Activate firewalls rules.
      - name: Activate firewalls rules.
        command: "{{ item }}"
        loop:       
          - firewall-cmd --reload
          #- systemctl restart firewalld.service

      ## Network isn't managed by nmcli in Vagrant, but just in case it starts to mess with our zone:
      - name: Populate ifcfg-enp0s3 file
        lineinfile:
          path: /etc/sysconfig/network-scripts/ifcfg-enp0s3    
          line: ZONE=public
          create: no
          
      - name: Populate ifcfg-enp0s8 file
        lineinfile:
          path: /etc/sysconfig/network-scripts/ifcfg-enp0s8    
          line: "{{ item }}"
          create: yes
        loop:
          - ZONE=dmz
          - NM_CONTROLLED=no
          
      ##  More system hardening - Better to just have a hardened system image ready if we are going to do this often.
        # TCP Wrapers? 
        # PAM policy? 
        # SSH root restriction? 
        # SELINUX? 
        # Configuration compliance with SCAP? 
        # AIDE?
        
        
      ##  U S E R S  A N D  G R O U P S
      ##  **********************************************************************************************
      - name: Add a privileged SSH user
        user:
          name: "{{ var_ssh_user }}"
          groups: wheel
          state: present  
          expires: -1
          
      - name: Add public SSH key to authorized_key.
        authorized_key:
          user: "{{ var_ssh_user }}"
          state: present
          key: "{{ lookup('file', '/vagrant/files/key.pub') }}"
 
      
      
      ##  C O N S U L   C O N F I G U R A T I O N
      ##  **********************************************************************************************
      - name: Install consul
        yum:
          name: "{{ item }}"
          state: latest
        loop:
          - consul

      - name: Create service group consul
        group:
          name: "{{ var_consul_user }}"
          state: present  
          system: yes

      - name: Create service user consul
        user:
          name: "{{ var_consul_user }}"
          groups: "{{ var_consul_user }}"
          state: present  
          system: yes
          shell: /sbin/nologin
          expires: -1
          
      - name: Populate HOSTS file
        lineinfile:
          path: /etc/hosts
          owner: "{{ var_consul_user }}"
          group: "{{ var_consul_user }}"
          mode: '0775'          
          line: "{{ item }}"
          create: yes
        loop:
          - "{{ var_ip_node_1 }} {{ var_hostname_node1 }}"
          - "{{ var_ip_node_2 }} {{ var_hostname_node2 }}"
          - "{{ var_ip_node_3 }} {{ var_hostname_node3 }}"
          - "{{ var_ip_node_4 }} {{ var_hostname_node4 }}"

      - name: Create consul configuration directories
        file:
          path: "{{ item }}"
          owner: "{{ var_consul_user }}"
          group: "{{ var_consul_user }}"
          state: directory
          mode: '0775'     
        loop:
          - /var/lib/consul 
          - /etc/consul.d

      - name: Generate consul secret
        shell: consul keygen
        register: var_consul_secret
        
      - name: Present yourself
        debug:
          msg: "{{ var_consul_secret.stdout }}"
        
      - name: Create Consul Service from an Ansible template
        template:
          src: consul.service.j2
          dest: /etc/systemd/system/consul.service
          owner: root
          group: root
          mode: '0755'
          
      - name: Reload Systemctl daemon to make system aware of the service.
        command: systemctl daemon-reload
              
      - name: Copy over the JSON Consul configuration
        template:
          src: config.json.j2
          dest: /etc/consul.d/config.json 
          owner: consul
          group: consul
          mode: '0755'
          #validate: /usr/bin/consul validate %s
      
      - name: Ensure serices are (still) running.
        service:
          name: "{{ item }}"
          state: restarted
        loop:
          - consul
          - firewalld      
          - network             # Just keep the freaking zone
          
      ##  C L E A N U P
      ##  **********************************************************************************************
      # Remove any key I don't know about
      # - name: firewall  configuration
        # command: "{{ item }}"
        # loop:
          # - rm -rf /etc/ssh/*key
      
      # - name: Remove privileged user vagrant
        # user:
          # name: vagrant
          # state: absent 
          # remove: yes
          
      # - name: Remove vagrant elevation privileges.
       # file:
          # path: /etc/sudoers.d/vagrant
          # state: absent